// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
   id String @id @default(uuid())
   name String @db.VarChar(50)
   email String @unique
   password String
   profilePhoto String?
   mobile     Int
   role USER_ROLE @default(CUSTOMER)
   isDeleted Boolean @default(false)
   isBlocked Boolean @default(false)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   @@map("user")
   Review Review[]
   ReviewVote ReviewVote[]
}


model Product {
  productId String @id @default(uuid())
  name String @db.VarChar(50)
  price Int
  description String
  productPhoto String
  quantity Int
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categoryId String
  category Category @relation(fields: [categoryId],references: [categoryId])
  @@map("product")
  Review Review[]
}

model Category {
  categoryId String   @id @default(uuid())
  name       String   @db.VarChar(50)
  image      String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)
  product    Product[]
}

model Review {
  reviewId   String        @id @default(uuid())
  content    String
  rating     Int?          // Optional rating field, if needed
  userId     String
  productId  String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt


  user       User          @relation(fields: [userId], references: [id])
  product    Product       @relation(fields: [productId], references: [productId])
  votes      ReviewVote[]

  @@map("review")
}

model ReviewVote {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  vote      Vote
  createdAt DateTime @default(now())

  review    Review   @relation(fields: [reviewId], references: [reviewId])
  user      User     @relation(fields: [userId], references: [id])

  // Ensure a user can only vote once per review
  @@unique([reviewId, userId])
  @@map("review_vote")
}





enum USER_ROLE {
  CUSTOMER
  SUPERADMIN
}

enum Vote {
  LIKE
  DISLIKE
}